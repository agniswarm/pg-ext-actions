#!/usr/bin/env bash
set -euo pipefail
set -x

# Detect operating system
detect_os() {
    case "$(uname -s)" in
        Linux*)     echo "linux" ;;
        Darwin*)    echo "macos" ;;
        CYGWIN*|MINGW*|MSYS*) echo "windows" ;;
        *)          echo "unknown" ;;
    esac
}

OS=$(detect_os)
echo "Detected OS: $OS"

# Function to run make (or nmake) with appropriate permissions and safe arg handling.
# Usage: run_make <target> "<extra-vars>"
# Example: run_make "" ""                 -> runs: make
#          run_make "install" ""          -> runs: make install
#          run_make "install" "PGUSER=postgres" -> runs: make PGUSER=postgres install
run_make() {
    local target="${1:-}"      # may be empty => default make target (build)
    local extra="${2:-}"       # optional additional variables, e.g. "PGUSER=postgres"
    local cmd

    case "$OS" in
        "windows")
            # prefer nmake / Makefile.win on Windows if present
            if [ -f "Makefile.win" ]; then
                # Use nmake; pass extra vars (unquoted) if provided
                if [ -n "$extra" ]; then
                    cmd=(nmake /NOLOGO /F Makefile.win $extra $target)
                else
                    cmd=(nmake /NOLOGO /F Makefile.win $target)
                fi
            else
                # fallback to mingw32-make or make
                if command -v mingw32-make >/dev/null 2>&1; then
                    if [ -n "$extra" ]; then
                        cmd=(mingw32-make $extra $target)
                    else
                        cmd=(mingw32-make $target)
                    fi
                else
                    if [ -n "$extra" ]; then
                        cmd=(make $extra $target)
                    else
                        cmd=(make $target)
                    fi
                fi
            fi
            ;;
        "macos")
            export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"
            if [ -n "$extra" ]; then
                cmd=(make $extra $target)
            else
                cmd=(make $target)
            fi
            # install might require sudo; caller decides to pass install target
            ;;
        *)
            # linux / other unix
            if [ -n "$extra" ]; then
                cmd=(make $extra $target)
            else
                cmd=(make $target)
            fi
            ;;
    esac

    # Print and run the command safely (array expansion avoids quoting issues)
    echo "Running: ${cmd[*]}"
    "${cmd[@]}"
}

# Build and install extension
# NOTE: do not pass quoted empty tokens; only pass extra variables if non-empty.
run_make "" ""            # build (default target)
run_make "install" ""     # install

# Run regression tests (installcheck) -- set PGUSER=postgres to ensure correct user when needed
status=0
if ! run_make "installcheck" "PGUSER=postgres"; then
    status=$?
    echo "installcheck failed with status ${status}"
fi

# If regression diffs exist, print them for debugging
if [ "${status}" -ne 0 ] && [ -f regression.diffs ]; then
    echo "=== regression.diffs ==="
    cat regression.diffs || true
fi

exit ${status}
