#!/usr/bin/env bash

set -ex

if [[ $# -eq 0 ]]; then
    cat << EOF
Usage:
    pg_setup.sh PG_VERSION [OPERATING_SYSTEM]
    
Arguments:
    PG_VERSION: PostgreSQL major version number (required)
    OPERATING_SYSTEM: Operating system to run on - linux, macos, or windows (optional, defaults to linux)
EOF
    exit 1
fi

PG_VERSION=$1
OS_INPUT=${2:-linux}

# Parse OS and version from input
parse_os() {
    local input="$1"
    
    # Check for specific OS versions
    case "$input" in
        ubuntu-*|debian-*|centos-*|rhel-*|fedora-*|suse-*|alpine-*)
            echo "linux"
            ;;
        macos-*|darwin-*)
            echo "macos"
            ;;
        windows-*|win-*)
            echo "windows"
            ;;
        linux|macos|windows)
            echo "$input"
            ;;
        *)
            # Auto-detect if invalid input provided
            case "$(uname -s)" in
                Linux*)     echo "linux";;
                Darwin*)    echo "macos";;
                CYGWIN*|MINGW*|MSYS*) echo "windows";;
                *)          echo "unknown";;
            esac
            ;;
    esac
}

OS=$(parse_os "$OS_INPUT")
OS_VERSION="$OS_INPUT"

if [[ "$OS_INPUT" == "linux" || "$OS_INPUT" == "macos" || "$OS_INPUT" == "windows" ]]; then
    echo "Using specified operating system: $OS"
else
    echo "Using specified operating system: $OS (version: $OS_VERSION)"
fi

# Function to install PostgreSQL on Linux (Ubuntu/Debian)
install_postgresql_linux() {
    local version=$1
    local contrib=$2
    local os_version="$3"
    
    # Remove existing postgres instances
    dpkg-query -f '${Package}\n' -W | grep ^postgresql | xargs sudo dpkg --purge || true
    
    # Install postgres packages
    curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
    sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    sudo apt-get update
    DEBIAN_FRONTEND=noninteractive sudo apt-get install -y postgresql-$version \
                                                       postgresql-server-dev-$version \
                                                       postgresql-client-$version
    
    # Install contrib packages if needed
    if [[ $contrib == 'true' ]]; then
        sudo apt-get install -y postgresql-contrib-$version
    fi
    
    # Enable trust authentication in postgres
    sudo tee /etc/postgresql/$version/main/pg_hba.conf <<EOF
local all all trust
host all all 0/0 trust
host all all ::0/0 trust
EOF
    sudo service postgresql reload
    
    # OS-specific optimizations
    case "$os_version" in
        ubuntu-22.04|ubuntu-24.04)
            echo "Optimizing for Ubuntu $(echo $os_version | cut -d'-' -f2)"
            # Ubuntu-specific optimizations can go here
            ;;
        debian-*)
            echo "Optimizing for Debian $(echo $os_version | cut -d'-' -f2)"
            # Debian-specific optimizations can go here
            ;;
    esac
}

# Function to install PostgreSQL on macOS
install_postgresql_macos() {
    local version=$1
    local contrib=$2
    local os_version="$3"
    
    # Check if Homebrew is installed
    if ! command -v brew &> /dev/null; then
        echo "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    
    # Install PostgreSQL and development tools
    brew install postgresql@$version
    
    # Add PostgreSQL to PATH for this session and future sessions
    export PATH="/opt/homebrew/opt/postgresql@$version/bin:$PATH"
    echo 'export PATH="/opt/homebrew/opt/postgresql@'$version'/bin:$PATH"' >> ~/.zshrc
    echo 'export PATH="/opt/homebrew/opt/postgresql@'$version'/bin:$PATH"' >> ~/.bash_profile
    
    # Set up PostgreSQL development environment
    export PG_CONFIG="/opt/homebrew/opt/postgresql@$version/bin/pg_config"
    export PKG_CONFIG_PATH="/opt/homebrew/opt/postgresql@$version/lib/pkgconfig:$PKG_CONFIG_PATH"
    export LDFLAGS="-L/opt/homebrew/opt/postgresql@$version/lib $LDFLAGS"
    export CPPFLAGS="-I/opt/homebrew/opt/postgresql@$version/include $CPPFLAGS"
    
    # Add environment variables to shell profiles
    echo 'export PG_CONFIG="/opt/homebrew/opt/postgresql@'$version'/bin/pg_config"' >> ~/.zshrc
    echo 'export PKG_CONFIG_PATH="/opt/homebrew/opt/postgresql@'$version'/lib/pkgconfig:$PKG_CONFIG_PATH"' >> ~/.zshrc
    echo 'export LDFLAGS="-L/opt/homebrew/opt/postgresql@'$version'/lib $LDFLAGS"' >> ~/.zshrc
    echo 'export CPPFLAGS="-I/opt/homebrew/opt/postgresql@'$version'/include $CPPFLAGS"' >> ~/.zshrc
    
    # Start PostgreSQL service
    brew services start postgresql@$version
    
    # Wait a moment for the service to start
    sleep 3
    
    # Check what users exist and create postgres role if needed
    echo "Checking PostgreSQL users..."
    /opt/homebrew/opt/postgresql@$version/bin/psql -d postgres -c "\du" || true
    
    # Create postgres role if it doesn't exist
    echo "Creating postgres role..."
    /opt/homebrew/opt/postgresql@$version/bin/psql -d postgres -c "CREATE ROLE postgres WITH LOGIN SUPERUSER CREATEDB CREATEROLE;" 2>/dev/null || echo "postgres role already exists or creation failed"
    
    # Create database using full path
    /opt/homebrew/opt/postgresql@$version/bin/createdb postgres || true
    
    # Install contrib if needed
    if [[ $contrib == 'true' ]]; then
        echo "PostgreSQL contrib is included by default on macOS"
    fi
    
    # OS-specific optimizations
    case "$os_version" in
        macos-12|macos-13|macos-14|macos-15)
            echo "Optimizing for macOS $(echo $os_version | cut -d'-' -f2)"
            # macOS version-specific optimizations can go here
            ;;
        darwin-*)
            echo "Optimizing for Darwin $(echo $os_version | cut -d'-' -f2)"
            # Darwin version-specific optimizations can go here
            ;;
    esac
}

# Function to parse JSON and extract download information
parse_download_info() {
    local version="$1"
    local downloads_file="$2"
    
    # Extract download URL and filename from JSON using basic parsing
    local download_url=""
    local download_filename=""
    
    # Use grep and sed to extract the URL and filename for the specific version
    download_url=$(grep -A 3 "\"$version\":" "$downloads_file" | grep '"url"' | sed 's/.*"url": *"\([^"]*\)".*/\1/')
    download_filename=$(grep -A 3 "\"$version\":" "$downloads_file" | grep '"filename"' | sed 's/.*"filename": *"\([^"]*\)".*/\1/')
    
    if [[ -z "$download_url" || -z "$download_filename" ]]; then
        echo "Error: Could not find download information for PostgreSQL version $version in $downloads_file"
        echo "Available versions in the file:"
        grep -o '"[0-9]\+":' "$downloads_file" | sed 's/["":]//g' | tr '\n' ' '
        echo ""
        return 1
    fi
    
    echo "$download_url|$download_filename"
    return 0
}

# Function to install PostgreSQL on Windows using direct download from EnterpriseDB
install_postgresql_windows() {
    local version=$1
    local contrib=$2
    local os_version="$3"
    local pf_root="/c/Program Files/PostgreSQL/$version"
    local pf_bin="$pf_root/bin"

    echo "Installing PostgreSQL $version on Windows using direct download..."

    # Load download URLs from JSON file
    local downloads_file="postgresql-downloads.json"
    
    if [[ ! -f "$downloads_file" ]]; then
        echo "Error: $downloads_file not found. Cannot determine download URL for PostgreSQL $version"
        echo "Please ensure the downloads file is available in the current directory"
        exit 1
    fi
    
    # Parse download information from JSON
    local download_info
    if ! download_info=$(parse_download_info "$version" "$downloads_file"); then
        exit 1
    fi
    
    # Split the result (URL|filename)
    local download_url="${download_info%|*}"
    local download_filename="${download_info#*|}"
    
    echo "Found download info for PostgreSQL $version:"
    echo "  URL: $download_url"
    echo "  Filename: $download_filename"

    echo "Downloading PostgreSQL $version from: $download_url"
    
    # Download PostgreSQL
    if command -v curl >/dev/null 2>&1; then
        curl -L -o "$download_filename" "$download_url"
    elif command -v wget >/dev/null 2>&1; then
        wget -O "$download_filename" "$download_url"
    else
        echo "Error: Neither curl nor wget found. Cannot download PostgreSQL"
        exit 1
    fi

    if [[ ! -f "$download_filename" ]]; then
        echo "Error: Failed to download PostgreSQL $version"
        exit 1
    fi

    echo "Downloaded: $download_filename"

    # Extract the zip file
    echo "Extracting PostgreSQL..."
    if command -v unzip >/dev/null 2>&1; then
        unzip -q "$download_filename"
    else
        echo "Error: unzip not found. Cannot extract PostgreSQL"
        exit 1
    fi

    # Find the extracted directory (should be something like "pgsql" or "postgresql-*")
    local extracted_dir=""
    for dir in pgsql postgresql-*; do
        if [[ -d "$dir" ]]; then
            extracted_dir="$dir"
            break
        fi
    done

    if [[ -z "$extracted_dir" ]]; then
        echo "Error: Could not find extracted PostgreSQL directory"
        exit 1
    fi

    echo "Found extracted directory: $extracted_dir"

    # Create Program Files directory if it doesn't exist
    mkdir -p "/c/Program Files/PostgreSQL"

    # Copy PostgreSQL to Program Files
    echo "Installing PostgreSQL to Program Files..."
    cp -r "$extracted_dir" "/c/Program Files/PostgreSQL/$version"

    # Clean up downloaded files
    rm -f "$download_filename"
    rm -rf "$extracted_dir"

    # Add PostgreSQL to PATH for this session
    export PATH="$pf_bin:$PATH"
    echo "Added PostgreSQL bin to PATH: $pf_bin"
    
    # Wait a moment for installation to complete
    sleep 2
    
    # Initialize database if it doesn't exist
    if [[ -x "$pf_bin/initdb.exe" && ! -d "$pf_root/data" ]]; then
        echo "Initializing PostgreSQL database..."
        "$pf_bin/initdb.exe" -D "$pf_root/data" || true
    fi
    
    # Start PostgreSQL service (try different service name patterns)
    echo "Starting PostgreSQL service..."
    net start "postgresql-x64-$version" >/dev/null 2>&1 || true
    net start "postgresql-$version" >/dev/null 2>&1 || true
    net start postgresql >/dev/null 2>&1 || true
    
    # Wait for service to start
    sleep 3
    
    # Create database
    if [[ -x "$pf_bin/createdb.exe" ]]; then
        echo "Creating postgres database..."
        "$pf_bin/createdb.exe" postgres || true
    fi
    
    # Install contrib if needed
    if [[ $contrib == 'true' ]]; then
        echo "PostgreSQL contrib is included by default on Windows"
    fi
    
    # Derive PGXS and export to GitHub Actions environment so nmake can include pgxs.mk
    if command -v pg_config >/dev/null 2>&1; then
        PGXS_PATH="$(pg_config --pgxs 2>/dev/null || true)"
        if [ -n "$PGXS_PATH" ]; then
            echo "PGXS determined: $PGXS_PATH"
            # For GitHub Actions, write to GITHUB_ENV so later steps can read it
            if [ -n "$GITHUB_ENV" ]; then
                echo "PGXS=$PGXS_PATH" >> "$GITHUB_ENV"
            else
                # Fallback for local runs
                export PGXS="$PGXS_PATH"
            fi
        else
            echo "Warning: pg_config --pgxs returned empty; PGXS not exported."
        fi
    else
        echo "Warning: pg_config not found; PGXS cannot be exported."
    fi
    
    # OS-specific optimizations
    case "$os_version" in
        windows-2022|windows-2025|windows-11|windows-10)
            echo "Optimizing for Windows $(echo $os_version | cut -d'-' -f2)"
            # Windows version-specific optimizations can go here
            ;;
        win-*)
            echo "Optimizing for Windows $(echo $os_version | cut -d'-' -f2)"
            # Windows version-specific optimizations can go here
            ;;
    esac
}

# Main installation logic
case $OS in
    "linux")
        install_postgresql_linux $PG_VERSION $CONTRIB "$OS_VERSION"
        ;;
    "macos")
        install_postgresql_macos $PG_VERSION $CONTRIB "$OS_VERSION"
        ;;
    "windows")
        install_postgresql_windows $PG_VERSION $CONTRIB "$OS_VERSION"
        ;;
    *)
        echo "Unsupported operating system: $OS"
        exit 1
        ;;
esac

echo "PostgreSQL $PG_VERSION installation completed successfully!"
