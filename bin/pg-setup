#!/usr/bin/env bash
set -euo pipefail
[ -n "${DEBUG:-}" ] && set -x

if [[ $# -lt 1 ]]; then
  cat <<EOF
Usage:
  pg_setup.sh PG_VERSION [OPERATING_SYSTEM]

Arguments:
  PG_VERSION        PostgreSQL major version (e.g. 14)
  OPERATING_SYSTEM  Optional: linux | macos | windows | ubuntu-22.04 | windows-2022 etc.
EOF
  exit 1
fi

PG_VERSION=$1
OS_INPUT=${2:-linux}
CONTRIB=${3:-false}

# normalize OS input
parse_os() {
  local in="$1"
  case "$in" in
    ubuntu-*|debian-*|centos-*|rhel-*|fedora-*|suse-*|alpine-*) echo "linux" ;;
    macos-*|darwin-*) echo "macos" ;;
    windows-*|win-*) echo "windows" ;;
    linux|macos|windows) echo "$in" ;;
    *) case "$(uname -s 2>/dev/null || true)" in
         Linux*) echo "linux" ;;
         Darwin*) echo "macos" ;;
         CYGWIN*|MINGW*|MSYS*) echo "windows" ;;
         *) echo "linux" ;; # default to linux
       esac ;;
  esac
}

OS="$(parse_os "$OS_INPUT")"
OS_VERSION="$OS_INPUT"
echo "Target OS: $OS (input: $OS_VERSION)"
echo "Requested PG version: $PG_VERSION"

#
# Linux (apt) - kept essentially the same as your prior flow
#
install_postgresql_linux() {
  local version=$1
  local contrib=$2

  echo "Installing PostgreSQL $version on Linux..."
  # Best-effort removal of old packages (kept from original)
  dpkg-query -f '${Package}\n' -W | grep ^postgresql | xargs -r sudo dpkg --purge || true

  curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - || true
  sudo sh -c "echo 'deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main' > /etc/apt/sources.list.d/pgdg.list"
  sudo apt-get update
  DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \
    postgresql-"$version" \
    postgresql-server-dev-"$version" \
    postgresql-client-"$version" || true

  if [[ "$contrib" == "true" ]]; then
    DEBIAN_FRONTEND=noninteractive sudo apt-get install -y postgresql-contrib-"$version" || true
  fi

  # Make local connections trust for CI convenience
  sudo tee /etc/postgresql/"$version"/main/pg_hba.conf >/dev/null <<EOF
local all all trust
host all all 0/0 trust
host all all ::0/0 trust
EOF
  sudo service postgresql reload || true

  echo "Linux install complete."
}

#
# macOS (brew) - preserved behavior
#
install_postgresql_macos() {
  local version=$1
  local contrib=$2

  echo "Installing PostgreSQL $version on macOS..."
  if ! command -v brew &>/dev/null; then
    echo "Installing Homebrew (required for brew install)..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  brew install "postgresql@$version" || true

  # Ensure PATH for the current run and persist for interactive shells (non-blocking)
  export PATH="/opt/homebrew/opt/postgresql@$version/bin:$PATH"
  echo "export PATH=\"/opt/homebrew/opt/postgresql@$version/bin:\$PATH\"" >> ~/.zshrc || true
  echo "export PATH=\"/opt/homebrew/opt/postgresql@$version/bin:\$PATH\"" >> ~/.bash_profile || true

  export PG_CONFIG="/opt/homebrew/opt/postgresql@$version/bin/pg_config"
  brew services start "postgresql@$version" || true
  sleep 2

  # Ensure postgres role/db exist (best-effort)
  /opt/homebrew/opt/postgresql@"$version"/bin/psql -d postgres -c '\du' >/dev/null 2>&1 || true
  /opt/homebrew/opt/postgresql@"$version"/bin/psql -d postgres -c "CREATE ROLE postgres WITH LOGIN SUPERUSER CREATEDB CREATEROLE;" 2>/dev/null || true
  /opt/homebrew/opt/postgresql@"$version"/bin/createdb postgres || true

  echo "macOS install complete."
}

#
# Windows installer: keep installer behavior like before, but add robust PGXS/PG_* exports
#
install_postgresql_windows() {
  local version=$1
  local contrib=$2
  local pf_bin="/c/Program Files/PostgreSQL/$version/bin"

  echo "Installing PostgreSQL $version on Windows..."

  # Install Chocolatey if missing (kept from original)
  if ! command -v choco &>/dev/null; then
    echo "Installing Chocolatey..."
    powershell -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \
      "Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))"
  fi

  # Try versioned package, else generic
  echo "Attempting Chocolatey install (this step mirrors previous behavior)..."
  if choco install "postgresql$version" -y >/dev/null 2>&1; then
    echo "Chocolatey installed postgresql$version"
  else
    echo "postgresql$version not available via choco; installing generic postgresql package"
    choco install postgresql -y >/dev/null 2>&1 || true
  fi

  # Ensure Program Files bin is on PATH for this session (non-destructive)
  if [[ -d "$pf_bin" ]]; then
    export PATH="$pf_bin:$PATH"
  fi

  # Allow installer time to settle
  sleep 4

  # Try to initialize/start DB (best-effort; keep previous behavior)
  if [[ -x "$pf_bin/initdb.exe" && ! -d "/c/Program Files/PostgreSQL/$version/data" ]]; then
    "$pf_bin/initdb.exe" -D "/c/Program Files/PostgreSQL/$version/data" || true
  fi

  # Try starting service (best-effort)
  net start "postgresql-x64-$version" >/dev/null 2>&1 || true
  net start "postgresql-$version" >/dev/null 2>&1 || true
  net start postgresql >/dev/null 2>&1 || true
  sleep 2

  if [[ -x "$pf_bin/createdb.exe" ]]; then
    "$pf_bin/createdb.exe" postgres || true
  fi

  #
  # ---- PGXS / PG_* detection and export (robust, minimal)
  #
  echo "Detecting pg_config and PGXS..."

  # Prefer Program Files pg_config if present
  PF_PG_CONFIG="$pf_bin/pg_config.exe"
  PG_CONFIG_CMD=""

  if [[ -x "$PF_PG_CONFIG" ]]; then
    PG_CONFIG_CMD="$PF_PG_CONFIG"
  elif command -v pg_config &>/dev/null; then
    PG_CONFIG_CMD="$(command -v pg_config)"
  else
    echo "Error: pg_config not found. Postgres installed but dev tools may be missing."
    # Do not fail the whole install step here â€” emit a clear message and exit non-zero
    echo "Please ensure PostgreSQL development files are available on Windows runner."
    exit 1
  fi

  # Query pg_config for candidate PGXS
  PGXS_CAND="$("$PG_CONFIG_CMD" --pgxs 2>/dev/null || true)"
  if [[ -n "$PGXS_CAND" && -f "$PGXS_CAND" ]]; then
    echo "pgxs.mk found at: $PGXS_CAND"
    if [[ -n "${GITHUB_ENV:-}" ]]; then
      echo "PGXS=$PGXS_CAND" >> "$GITHUB_ENV"
    else
      export PGXS="$PGXS_CAND"
    fi
    echo "Exported PGXS for downstream steps."
  else
    echo "pgxs.mk not present at pg_config --pgxs ('$PGXS_CAND'). Falling back to exporting PG_* variables."

    # Query canonical directories from pg_config (best-effort)
    PG_BINDIR="$("$PG_CONFIG_CMD" --bindir 2>/dev/null || true)"
    PG_INCLUDEDIR="$("$PG_CONFIG_CMD" --includedir 2>/dev/null || true)"
    PG_LIBDIR="$("$PG_CONFIG_CMD" --libdir 2>/dev/null || true)"
    PG_PKGLIBDIR="$("$PG_CONFIG_CMD" --pkglibdir 2>/dev/null || true)"
    PG_SHAREDIR="$("$PG_CONFIG_CMD" --sharedir 2>/dev/null || true)"

    echo "Discovered:"
    echo "  PG_BINDIR   = ${PG_BINDIR:-<empty>}"
    echo "  PG_INCLUDEDIR = ${PG_INCLUDEDIR:-<empty>}"
    echo "  PG_LIBDIR   = ${PG_LIBDIR:-<empty>}"
    echo "  PG_PKGLIBDIR= ${PG_PKGLIBDIR:-<empty>}"
    echo "  PG_SHAREDIR = ${PG_SHAREDIR:-<empty>}"

    if [[ -n "${GITHUB_ENV:-}" ]]; then
      echo "PG_CONFIG=$PG_CONFIG_CMD" >> "$GITHUB_ENV"
      echo "PG_BINDIR=$PG_BINDIR" >> "$GITHUB_ENV"
      echo "PG_INCLUDEDIR=$PG_INCLUDEDIR" >> "$GITHUB_ENV"
      echo "PG_LIBDIR=$PG_LIBDIR" >> "$GITHUB_ENV"
      echo "PG_PKGLIBDIR=$PG_PKGLIBDIR" >> "$GITHUB_ENV"
      echo "PG_SHAREDIR=$PG_SHAREDIR" >> "$GITHUB_ENV"
      echo "PGXS_AVAILABLE=false" >> "$GITHUB_ENV"
    else
      export PG_CONFIG="$PG_CONFIG_CMD"
      export PG_BINDIR="$PG_BINDIR"
      export PG_INCLUDEDIR="$PG_INCLUDEDIR"
      export PG_LIBDIR="$PG_LIBDIR"
      export PG_PKGLIBDIR="$PG_PKGLIBDIR"
      export PG_SHAREDIR="$PG_SHAREDIR"
      export PGXS_AVAILABLE=false
    fi

    echo "Exported PG_* variables for downstream Makefile fallback."
  fi

  echo "Windows install/detection complete."
}

# dispatch to correct installer
case "$OS" in
  linux)  install_postgresql_linux "$PG_VERSION" "$CONTRIB" ;;
  macos)  install_postgresql_macos "$PG_VERSION" "$CONTRIB" ;;
  windows) install_postgresql_windows "$PG_VERSION" "$CONTRIB" ;;
  *) echo "Unsupported OS: $OS"; exit 1 ;;
esac

echo "pg_setup.sh complete (PG version: $PG_VERSION, OS: $OS)."
