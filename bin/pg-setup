#!/usr/bin/env bash

set -ex

if [[ $# -eq 0 ]]; then
    cat << EOF
Usage:
    pg_setup.sh PG_VERSION
EOF
    exit 1
fi

PG_VERSION=$1

# Detect operating system
detect_os() {
    case "$(uname -s)" in
        Linux*)     echo "linux";;
        Darwin*)    echo "macos";;
        CYGWIN*|MINGW*|MSYS*) echo "windows";;
        *)          echo "unknown";;
    esac
}

OS=$(detect_os)

# Function to install PostgreSQL on Linux (Ubuntu/Debian)
install_postgresql_linux() {
    local version=$1
    local contrib=$2
    
    # Remove existing postgres instances
    dpkg-query -f '${Package}\n' -W | grep ^postgresql | xargs sudo dpkg --purge || true
    
    # Install postgres packages
    curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
    sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    sudo apt-get update
    DEBIAN_FRONTEND=noninteractive sudo apt-get install -y postgresql-$version \
                                                       postgresql-server-dev-$version \
                                                       postgresql-client-$version
    
    # Install contrib packages if needed
    if [[ $contrib == 'true' ]]; then
        sudo apt-get install -y postgresql-contrib-$version
    fi
    
    # Enable trust authentication in postgres
    sudo tee /etc/postgresql/$version/main/pg_hba.conf <<EOF
local all all trust
host all all 0/0 trust
host all all ::0/0 trust
EOF
    sudo service postgresql reload
}

# Function to install PostgreSQL on macOS
install_postgresql_macos() {
    local version=$1
    local contrib=$2
    
    # Check if Homebrew is installed
    if ! command -v brew &> /dev/null; then
        echo "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    
    # Install PostgreSQL
    brew install postgresql@$version
    
    # Add PostgreSQL to PATH for this session and future sessions
    export PATH="/opt/homebrew/opt/postgresql@$version/bin:$PATH"
    echo 'export PATH="/opt/homebrew/opt/postgresql@'$version'/bin:$PATH"' >> ~/.zshrc
    echo 'export PATH="/opt/homebrew/opt/postgresql@'$version'/bin:$PATH"' >> ~/.bash_profile
    
    # Start PostgreSQL service
    brew services start postgresql@$version
    
    # Wait a moment for the service to start
    sleep 3
    
    # Create database using full path
    /opt/homebrew/opt/postgresql@$version/bin/createdb postgres || true
    
    # Install contrib if needed
    if [[ $contrib == 'true' ]]; then
        echo "PostgreSQL contrib is included by default on macOS"
    fi
}

# Function to install PostgreSQL on Windows
install_postgresql_windows() {
    local version=$1
    local contrib=$2
    
    # Check if Chocolatey is installed
    if ! command -v choco &> /dev/null; then
        echo "Installing Chocolatey..."
        powershell -Command "Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))"
    fi
    
    # Install PostgreSQL
    choco install postgresql --version $version -y
    
    # Add PostgreSQL to PATH for this session
    export PATH="$PATH:/c/Program Files/PostgreSQL/$version/bin"
    
    # Wait a moment for installation to complete
    sleep 5
    
    # Initialize database if it doesn't exist
    if [ ! -d "/c/Program Files/PostgreSQL/$version/data" ]; then
        "/c/Program Files/PostgreSQL/$version/bin/initdb.exe" -D "/c/Program Files/PostgreSQL/$version/data" || true
    fi
    
    # Start PostgreSQL service
    net start postgresql-x64-$version || true
    
    # Wait for service to start
    sleep 3
    
    # Install contrib if needed
    if [[ $contrib == 'true' ]]; then
        echo "PostgreSQL contrib is included by default on Windows"
    fi
}

# Main installation logic
case $OS in
    "linux")
        install_postgresql_linux $PG_VERSION $CONTRIB
        ;;
    "macos")
        install_postgresql_macos $PG_VERSION $CONTRIB
        ;;
    "windows")
        install_postgresql_windows $PG_VERSION $CONTRIB
        ;;
    *)
        echo "Unsupported operating system: $OS"
        exit 1
        ;;
esac

echo "PostgreSQL $PG_VERSION installation completed successfully!"
