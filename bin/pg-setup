#!/usr/bin/env bash
set -euo pipefail
[ -n "${DEBUG:-}" ] && set -x

if [[ $# -eq 0 ]]; then
    cat << EOF
Usage:
    pg_setup.sh PG_VERSION [OPERATING_SYSTEM]
    
Arguments:
    PG_VERSION: PostgreSQL major version number (required)
    OPERATING_SYSTEM: Operating system to run on - linux, macos, or windows (optional, defaults to linux)
EOF
    exit 1
fi

PG_VERSION=$1
OS_INPUT=${2:-linux}
CONTRIB=${3:-false}   # optional third arg to request contrib install

# Parse OS and version from input (normalize)
parse_os() {
    local input="$1"
    case "$input" in
        ubuntu-*|debian-*|centos-*|rhel-*|fedora-*|suse-*|alpine-*)
            echo "linux" ;;
        macos-*|darwin-*)
            echo "macos" ;;
        windows-*|win-*)
            echo "windows" ;;
        linux|macos|windows)
            echo "$input" ;;
        *)
            case "$(uname -s 2>/dev/null || echo Unknown)" in
                Linux*)  echo "linux" ;;
                Darwin*) echo "macos" ;;
                CYGWIN*|MINGW*|MSYS*) echo "windows" ;;
                *) echo "unknown" ;;
            esac ;;
    esac
}

OS=$(parse_os "$OS_INPUT")
OS_VERSION="$OS_INPUT"
echo "Target OS: $OS (input: $OS_VERSION)"

#
# Linux installer (Debian/Ubuntu)
#
install_postgresql_linux() {
    local version=$1
    local contrib=$2
    local os_version="$3"

    echo "Installing PostgreSQL $version on Linux (apt)..."

    # Remove old package traces (best-effort)
    dpkg-query -f '${Package}\n' -W | grep ^postgresql | xargs -r sudo dpkg --purge || true

    # Add PGDG apt repo and install
    curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
    sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    sudo apt-get update
    DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \
      postgresql-"$version" \
      postgresql-server-dev-"$version" \
      postgresql-client-"$version" || true

    if [[ "$contrib" == "true" ]]; then
        DEBIAN_FRONTEND=noninteractive sudo apt-get install -y postgresql-contrib-"$version" || true
    fi

    # Make local connections trust for CI convenience
    sudo tee /etc/postgresql/"$version"/main/pg_hba.conf >/dev/null <<EOF
local all all trust
host all all 0/0 trust
host all all ::0/0 trust
EOF
    sudo service postgresql reload || true

    echo "Postgres $version installed (linux)."
}

#
# macOS installer (Homebrew)
#
install_postgresql_macos() {
    local version=$1
    local contrib=$2
    local os_version="$3"

    echo "Installing PostgreSQL $version on macOS (brew)..."

    if ! command -v brew &>/dev/null; then
        echo "Homebrew not found â€” installing..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi

    brew install "postgresql@$version" || true

    # ensure PATH for current process & for interactive shells
    export PATH="/opt/homebrew/opt/postgresql@$version/bin:$PATH"
    echo "export PATH=\"/opt/homebrew/opt/postgresql@$version/bin:\$PATH\"" >> ~/.zshrc || true
    echo "export PATH=\"/opt/homebrew/opt/postgresql@$version/bin:\$PATH\"" >> ~/.bash_profile || true

    export PG_CONFIG="/opt/homebrew/opt/postgresql@$version/bin/pg_config"
    export PKG_CONFIG_PATH="/opt/homebrew/opt/postgresql@$version/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
    export LDFLAGS="-L/opt/homebrew/opt/postgresql@$version/lib ${LDFLAGS:-}"
    export CPPFLAGS="-I/opt/homebrew/opt/postgresql@$version/include ${CPPFLAGS:-}"

    brew services start "postgresql@$version" || true
    sleep 2

    echo "macOS Postgres installed. Ensuring 'postgres' role / db..."
    /opt/homebrew/opt/postgresql@"$version"/bin/psql -d postgres -c '\du' >/dev/null 2>&1 || true
    /opt/homebrew/opt/postgresql@"$version"/bin/psql -d postgres -c "CREATE ROLE postgres WITH LOGIN SUPERUSER CREATEDB CREATEROLE;" 2>/dev/null || true
    /opt/homebrew/opt/postgresql@"$version"/bin/createdb postgres || true

    echo "Postgres $version installed (macos)."
}

#
# Windows installer (Chocolatey / official installer)
#
install_postgresql_windows() {
    local version=$1
    local contrib=$2
    local os_version="$3"

    echo "Installing PostgreSQL $version on Windows..."

    # Install Chocolatey if missing
    if ! command -v choco &>/dev/null; then
        echo "Installing Chocolatey..."
        powershell -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \
          "Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))"
    fi

    # Prefer official per-version package, fall back to generic installer package
    echo "Installing postgresql $version via Chocolatey (may take a while)..."
    if ! choco install "postgresql$version" -y >/dev/null 2>&1; then
        echo "postgresql$version not available via choco; installing generic postgresql package"
        choco install postgresql -y >/dev/null 2>&1 || true
    fi

    # Add Program Files Postgres bin to PATH for this session (most installers install there)
    PF_BIN="/c/Program Files/PostgreSQL/$version/bin"
    if [[ -d "$PF_BIN" ]]; then
        export PATH="$PF_BIN:$PATH"
    fi

    # Give the installer a moment
    sleep 4

    # Try to initdb if data dir missing (best-effort)
    if [[ ! -d "/c/Program Files/PostgreSQL/$version/data" ]]; then
        if [[ -x "/c/Program Files/PostgreSQL/$version/bin/initdb.exe" ]]; then
            "/c/Program Files/PostgreSQL/$version/bin/initdb.exe" -D "/c/Program Files/PostgreSQL/$version/data" || true
        fi
    fi

    # Attempt to start service (best effort)
    echo "Attempting to start Postgres service..."
    net start "postgresql-x64-$version" >/dev/null 2>&1 || true
    net start "postgresql-$version" >/dev/null 2>&1 || true
    net start postgresql >/dev/null 2>&1 || true
    sleep 2

    # Ensure createdb works (safe no-op if exists)
    if [[ -x "/c/Program Files/PostgreSQL/$version/bin/createdb.exe" ]]; then
        "/c/Program Files/PostgreSQL/$version/bin/createdb.exe" postgres || true
    fi

    echo "Verifying PostgreSQL development installation and exporting PGXS..."

    #
    # Robust PGXS detection and export:
    # 1) Prefer Program Files pg_config if present
    # 2) Fallback to pg_config on PATH only if it returns a valid pgxs.mk path
    # 3) Try deriving expected pgxs path under Program Files
    # 4) If found, export PGXS to $GITHUB_ENV (for Actions) or export PGXS for local use
    #
    PG_CONFIG_CMD=""
    PF_PG_CONFIG="/c/Program Files/PostgreSQL/$version/bin/pg_config.exe"

    if [[ -x "$PF_PG_CONFIG" ]]; then
        echo "Using pg_config from Program Files: $PF_PG_CONFIG"
        PG_CONFIG_CMD="$PF_PG_CONFIG"
    elif command -v pg_config &>/dev/null; then
        PATH_PG_CONFIG="$(command -v pg_config)"
        echo "pg_config on PATH: $PATH_PG_CONFIG"
        PG_CONFIG_CMD="$PATH_PG_CONFIG"
    else
        echo "Error: pg_config not found on PATH nor in Program Files. Please ensure PostgreSQL dev tools are installed."
        exit 1
    fi

    PGXS_PATH="$("$PG_CONFIG_CMD" --pgxs 2>/dev/null || true)"
    if [[ -n "$PGXS_PATH" && -f "$PGXS_PATH" ]]; then
        echo "pgxs.mk found via pg_config: $PGXS_PATH"
        if [[ -n "${GITHUB_ENV:-}" ]]; then
            echo "PGXS=$PGXS_PATH" >> "$GITHUB_ENV"
        else
            export PGXS="$PGXS_PATH"
        fi
    else
        echo "pg_config --pgxs returned: '${PGXS_PATH:-<empty>}' (not usable). Trying derived Program Files path..."

        DERIVED="$PF_BIN/../lib/postgresql/pgxs/src/makefiles/pgxs.mk"
        # canonicalize
        DERIVED="$(cd "$(dirname "$DERIVED")" 2>/dev/null || true; echo "$(pwd)/$(basename "$DERIVED")" 2>/dev/null || echo "$DERIVED")"

        if [[ -f "$DERIVED" ]]; then
            echo "Found derived pgxs.mk at: $DERIVED"
            if [[ -n "${GITHUB_ENV:-}" ]]; then
                echo "PGXS=$DERIVED" >> "$GITHUB_ENV"
            else
                export PGXS="$DERIVED"
            fi
        else
            echo "Searching for pgxs.mk under Program Files/PostgreSQL..."
            FOUND="$(find "/c/Program Files/PostgreSQL" -type f -name pgxs.mk 2>/dev/null || true | head -n 1 || true)"
            if [[ -n "$FOUND" && -f "$FOUND" ]]; then
                echo "Found pgxs.mk by search: $FOUND"
                if [[ -n "${GITHUB_ENV:-}" ]]; then
                    echo "PGXS=$FOUND" >> "$GITHUB_ENV"
                else
                    export PGXS="$FOUND"
                fi
            else
                echo "ERROR: pgxs.mk not found. PostgreSQL development files (pgxs) are missing or installed in an unexpected location."
                echo "DEBUG: pg_config used: $PG_CONFIG_CMD"
                echo "DEBUG: pg_config --pgxs returned: '$PGXS_PATH'"
                echo "Contents of Program Files/PostgreSQL:"
                ls -la "/c/Program Files/PostgreSQL" 2>/dev/null || true
                exit 1
            fi
        fi
    fi

    echo "PGXS exported successfully."
    echo "PGXS value: ${PGXS:-$PGXS_PATH}"

    # Windows-specific optimizations hooks (no-op by default)
    case "$os_version" in
        windows-*|win-*)
            echo "Windows optimizations: none configured"
            ;;
    esac
}

# Dispatch
case "$OS" in
    linux)
        install_postgresql_linux "$PG_VERSION" "$CONTRIB" "$OS_VERSION"
        ;;
    macos)
        install_postgresql_macos "$PG_VERSION" "$CONTRIB" "$OS_VERSION"
        ;;
    windows)
        install_postgresql_windows "$PG_VERSION" "$CONTRIB" "$OS_VERSION"
        ;;
    *)
        echo "Unsupported OS: $OS"
        exit 1
        ;;
esac

echo "PostgreSQL $PG_VERSION installation completed!"
