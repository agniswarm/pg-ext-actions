#!/usr/bin/env bash

set -ex

if [[ $# -eq 0 ]]; then
    cat << EOF
Usage:
    pg_setup.sh PG_VERSION [OPERATING_SYSTEM]
    
Arguments:
    PG_VERSION: PostgreSQL major version number (required)
    OPERATING_SYSTEM: Operating system to run on - linux, macos, or windows (optional, defaults to linux)
EOF
    exit 1
fi

PG_VERSION=$1
OS_INPUT=${2:-linux}

# Parse OS and version from input
parse_os() {
    local input="$1"
    
    # Check for specific OS versions
    case "$input" in
        ubuntu-*|debian-*|centos-*|rhel-*|fedora-*|suse-*|alpine-*)
            echo "linux"
            ;;
        macos-*|darwin-*)
            echo "macos"
            ;;
        windows-*|win-*)
            echo "windows"
            ;;
        linux|macos|windows)
            echo "$input"
            ;;
        *)
            # Auto-detect if invalid input provided
            case "$(uname -s)" in
                Linux*)     echo "linux";;
                Darwin*)    echo "macos";;
                CYGWIN*|MINGW*|MSYS*) echo "windows";;
                *)          echo "unknown";;
            esac
            ;;
    esac
}

OS=$(parse_os "$OS_INPUT")
OS_VERSION="$OS_INPUT"

if [[ "$OS_INPUT" == "linux" || "$OS_INPUT" == "macos" || "$OS_INPUT" == "windows" ]]; then
    echo "Using specified operating system: $OS"
else
    echo "Using specified operating system: $OS (version: $OS_VERSION)"
fi

# Function to install PostgreSQL on Linux (Ubuntu/Debian)
install_postgresql_linux() {
    local version=$1
    local contrib=$2
    local os_version="$3"
    
    # Remove existing postgres instances
    dpkg-query -f '${Package}\n' -W | grep ^postgresql | xargs sudo dpkg --purge || true
    
    # Install postgres packages
    curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
    sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    sudo apt-get update
    DEBIAN_FRONTEND=noninteractive sudo apt-get install -y postgresql-$version \
                                                       postgresql-server-dev-$version \
                                                       postgresql-client-$version
    
    # Install contrib packages if needed
    if [[ $contrib == 'true' ]]; then
        sudo apt-get install -y postgresql-contrib-$version
    fi
    
    # Enable trust authentication in postgres
    sudo tee /etc/postgresql/$version/main/pg_hba.conf <<EOF
local all all trust
host all all 0/0 trust
host all all ::0/0 trust
EOF
    sudo service postgresql reload
    
    # OS-specific optimizations
    case "$os_version" in
        ubuntu-22.04|ubuntu-24.04)
            echo "Optimizing for Ubuntu $(echo $os_version | cut -d'-' -f2)"
            # Ubuntu-specific optimizations can go here
            ;;
        debian-*)
            echo "Optimizing for Debian $(echo $os_version | cut -d'-' -f2)"
            # Debian-specific optimizations can go here
            ;;
    esac
}

# Function to install PostgreSQL on macOS
install_postgresql_macos() {
    local version=$1
    local contrib=$2
    local os_version="$3"
    
    # Check if Homebrew is installed
    if ! command -v brew &> /dev/null; then
        echo "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    
    # Install PostgreSQL and development tools
    brew install postgresql@$version
    
    # Add PostgreSQL to PATH for this session and future sessions
    export PATH="/opt/homebrew/opt/postgresql@$version/bin:$PATH"
    echo 'export PATH="/opt/homebrew/opt/postgresql@'$version'/bin:$PATH"' >> ~/.zshrc
    echo 'export PATH="/opt/homebrew/opt/postgresql@'$version'/bin:$PATH"' >> ~/.bash_profile
    
    # Set up PostgreSQL development environment
    export PG_CONFIG="/opt/homebrew/opt/postgresql@$version/bin/pg_config"
    export PKG_CONFIG_PATH="/opt/homebrew/opt/postgresql@$version/lib/pkgconfig:$PKG_CONFIG_PATH"
    export LDFLAGS="-L/opt/homebrew/opt/postgresql@$version/lib $LDFLAGS"
    export CPPFLAGS="-I/opt/homebrew/opt/postgresql@$version/include $CPPFLAGS"
    
    # Add environment variables to shell profiles
    echo 'export PG_CONFIG="/opt/homebrew/opt/postgresql@'$version'/bin/pg_config"' >> ~/.zshrc
    echo 'export PKG_CONFIG_PATH="/opt/homebrew/opt/postgresql@'$version'/lib/pkgconfig:$PKG_CONFIG_PATH"' >> ~/.zshrc
    echo 'export LDFLAGS="-L/opt/homebrew/opt/postgresql@'$version'/lib $LDFLAGS"' >> ~/.zshrc
    echo 'export CPPFLAGS="-I/opt/homebrew/opt/postgresql@'$version'/include $CPPFLAGS"' >> ~/.zshrc
    
    # Start PostgreSQL service
    brew services start postgresql@$version
    
    # Wait a moment for the service to start
    sleep 3
    
    # Check what users exist and create postgres role if needed
    echo "Checking PostgreSQL users..."
    /opt/homebrew/opt/postgresql@$version/bin/psql -d postgres -c "\du" || true
    
    # Create postgres role if it doesn't exist
    echo "Creating postgres role..."
    /opt/homebrew/opt/postgresql@$version/bin/psql -d postgres -c "CREATE ROLE postgres WITH LOGIN SUPERUSER CREATEDB CREATEROLE;" 2>/dev/null || echo "postgres role already exists or creation failed"
    
    # Create database using full path
    /opt/homebrew/opt/postgresql@$version/bin/createdb postgres || true
    
    # Install contrib if needed
    if [[ $contrib == 'true' ]]; then
        echo "PostgreSQL contrib is included by default on macOS"
    fi
    
    # OS-specific optimizations
    case "$os_version" in
        macos-12|macos-13|macos-14|macos-15)
            echo "Optimizing for macOS $(echo $os_version | cut -d'-' -f2)"
            # macOS version-specific optimizations can go here
            ;;
        darwin-*)
            echo "Optimizing for Darwin $(echo $os_version | cut -d'-' -f2)"
            # Darwin version-specific optimizations can go here
            ;;
    esac
}

# Check if PostgreSQL is running and accepting connections
check_postgresql_running() {
    local pg_bin="$1"
    local max_attempts=10
    local attempt=1
    
    echo "Checking if PostgreSQL is running and accepting connections..."
    
    while [ $attempt -le $max_attempts ]; do
        echo "Attempt $attempt/$max_attempts: Checking PostgreSQL status..."
        
        if [ -x "$pg_bin/pg_isready.exe" ]; then
            if "$pg_bin/pg_isready.exe" -h localhost -p 5432 >/dev/null 2>&1; then
                echo "PostgreSQL is running and accepting connections"
                return 0
            else
                echo "PostgreSQL not ready yet (attempt $attempt)"
            fi
        else
            # Fallback: try to connect with psql
            if [ -x "$pg_bin/psql.exe" ]; then
                if echo "SELECT 1;" | "$pg_bin/psql.exe" -h localhost -p 5432 -d postgres >/dev/null 2>&1; then
                    echo "PostgreSQL is running and accepting connections"
                    return 0
                else
                    echo "PostgreSQL not ready yet (attempt $attempt)"
                fi
            else
                echo "Warning: Neither pg_isready nor psql available for connection test"
                return 1
            fi
        fi
        
        if [ $attempt -lt $max_attempts ]; then
            echo "Waiting 3 seconds before next attempt..."
            sleep 3
        fi
        attempt=$((attempt + 1))
    done
    
    echo "PostgreSQL is not running or not accepting connections after $max_attempts attempts"
    return 1
}

# Install PGXS from PostgreSQL source when not available
install_pgxs_from_source() {
    local version="$1"
    local pg_version=""
    
    # Map version numbers to source versions
    case "$version" in
        17) pg_version="17.0" ;;
        16) pg_version="16.4" ;;
        15) pg_version="15.8" ;;
        14) pg_version="14.13" ;;
        13) pg_version="13.16" ;;
        *)
            echo "Error: PostgreSQL version $version not supported for source download"
            echo "Supported versions: 13, 14, 15, 16, 17"
            return 1
            ;;
    esac
    
    echo "Downloading PostgreSQL $pg_version source for pgxs.mk..."
    
    # Download PostgreSQL source
    local source_url="https://ftp.postgresql.org/pub/source/v${pg_version}/postgresql-${pg_version}.tar.bz2"
    local source_file="postgresql-${pg_version}.tar.bz2"
    
    echo "Downloading from: $source_url"
    
    # Download the source
    if command -v curl >/dev/null 2>&1; then
        curl -LO "$source_url"
    elif command -v wget >/dev/null 2>&1; then
        wget "$source_url"
    else
        echo "Error: Neither curl nor wget found. Cannot download PostgreSQL source"
        return 1
    fi
    
    if [[ ! -f "$source_file" ]]; then
        echo "Error: Failed to download PostgreSQL source"
        return 1
    fi
    
    echo "Downloaded: $source_file"
    
    # Extract the source
    echo "Extracting PostgreSQL source..."
    if command -v tar >/dev/null 2>&1; then
        tar -xjf "$source_file"
    else
        echo "Error: tar not found. Cannot extract PostgreSQL source"
        rm -f "$source_file"
        return 1
    fi
    
    # Find the extracted directory
    local extracted_dir=""
    for dir in postgresql-*; do
        if [[ -d "$dir" ]]; then
            extracted_dir="$dir"
            break
        fi
    done
    
    if [[ -z "$extracted_dir" ]]; then
        echo "Error: Could not find extracted PostgreSQL directory"
        rm -f "$source_file"
        return 1
    fi
    
    echo "Found extracted directory: $extracted_dir"
    
    # Set PGXS path
    local pgxs_path="$(pwd)/${extracted_dir}/src/makefiles/pgxs.mk"
    
    if [[ -f "$pgxs_path" ]]; then
        echo "PGXS found at: $pgxs_path"
        
        # For GitHub Actions, write to GITHUB_ENV
        if [ -n "$GITHUB_ENV" ]; then
            echo "PGXS=$pgxs_path" >> "$GITHUB_ENV"
            echo "PGXS exported to GITHUB_ENV: $pgxs_path"
        else
            # Fallback for local runs
            export PGXS="$pgxs_path"
            echo "PGXS exported to environment: $pgxs_path"
        fi
        
        # Clean up the downloaded file but keep the extracted directory
        rm -f "$source_file"
        echo "PostgreSQL source downloaded and extracted successfully"
        echo "PGXS available at: $pgxs_path"
    else
        echo "Error: pgxs.mk not found in extracted directory"
        rm -f "$source_file"
        rm -rf "$extracted_dir"
        return 1
    fi
}

# Function to install PostgreSQL on Windows using direct download from EnterpriseDB
install_postgresql_windows() {
    local version=$1
    local contrib=$2
    local os_version="$3"
    local pf_root="/c/Program Files/PostgreSQL/$version"
    local pf_bin="$pf_root/bin"

    echo "Installing PostgreSQL $version on Windows using direct download..."

    # Hardcoded download URLs for Windows PostgreSQL versions
    local download_url=""
    local download_filename=""
    
    case "$version" in
        17)
            download_url="https://get.enterprisedb.com/postgresql/postgresql-17.6-1-windows-x64-binaries.zip"
            download_filename="postgresql-17.6-1-windows-x64-binaries.zip"
            ;;
        16)
            download_url="https://get.enterprisedb.com/postgresql/postgresql-16.10-1-windows-x64-binaries.zip"
            download_filename="postgresql-16.10-1-windows-x64-binaries.zip"
            ;;
        15)
            download_url="https://get.enterprisedb.com/postgresql/postgresql-15.14-1-windows-x64-binaries.zip"
            download_filename="postgresql-15.14-1-windows-x64-binaries.zip"
            ;;
        14)
            download_url="https://get.enterprisedb.com/postgresql/postgresql-14.19-1-windows-x64-binaries.zip"
            download_filename="postgresql-14.19-1-windows-x64-binaries.zip"
            ;;
        13)
            download_url="https://get.enterprisedb.com/postgresql/postgresql-13.22-1-windows-x64-binaries.zip"
            download_filename="postgresql-13.22-1-windows-x64-binaries.zip"
            ;;
        *)
            echo "Error: PostgreSQL version $version not supported for direct download"
            echo "Supported versions: 13, 14, 15, 16, 17"
            exit 1
            ;;
    esac
    
    echo "Using download info for PostgreSQL $version:"
    echo "  URL: $download_url"
    echo "  Filename: $download_filename"

    echo "Downloading PostgreSQL $version from: $download_url"
    
    # Download PostgreSQL
    if command -v curl >/dev/null 2>&1; then
        curl -L -o "$download_filename" "$download_url"
    elif command -v wget >/dev/null 2>&1; then
        wget -O "$download_filename" "$download_url"
    else
        echo "Error: Neither curl nor wget found. Cannot download PostgreSQL"
        exit 1
    fi

    if [[ ! -f "$download_filename" ]]; then
        echo "Error: Failed to download PostgreSQL $version"
        exit 1
    fi

    echo "Downloaded: $download_filename"

    # Extract the zip file
    echo "Extracting PostgreSQL..."
    if command -v unzip >/dev/null 2>&1; then
        unzip -q "$download_filename"
    else
        echo "Error: unzip not found. Cannot extract PostgreSQL"
        exit 1
    fi

    # Find the extracted directory (should be something like "pgsql" or "postgresql-*")
    local extracted_dir=""
    for dir in pgsql postgresql-*; do
        if [[ -d "$dir" ]]; then
            extracted_dir="$dir"
            break
        fi
    done

    if [[ -z "$extracted_dir" ]]; then
        echo "Error: Could not find extracted PostgreSQL directory"
        exit 1
    fi

    echo "Found extracted directory: $extracted_dir"

    # Create Program Files directory if it doesn't exist
    mkdir -p "/c/Program Files/PostgreSQL"

    # Copy PostgreSQL to Program Files
    echo "Installing PostgreSQL to Program Files..."
    cp -r "$extracted_dir" "/c/Program Files/PostgreSQL/$version"

    # Clean up downloaded files
    rm -f "$download_filename"
    rm -rf "$extracted_dir"

    # Add PostgreSQL to PATH for this session
    export PATH="$pf_bin:$PATH"
    echo "Added PostgreSQL bin to PATH: $pf_bin"
    
    # Wait a moment for installation to complete
    sleep 2
    
    # Initialize database if it doesn't exist
    if [[ -x "$pf_bin/initdb.exe" && ! -d "$pf_root/data" ]]; then
        echo "Initializing PostgreSQL database..."
        "$pf_bin/initdb.exe" -D "$pf_root/data" || true
    fi
    
        # Start PostgreSQL service (try different service name patterns)
        echo "Starting PostgreSQL service..."
        local service_started=false
        
        # First, check what PostgreSQL services are available
        echo "Checking for available PostgreSQL services..."
        sc query | grep -i postgresql || echo "No PostgreSQL services found in service list"
        
        # Try different service name patterns
        for service_name in "postgresql-x64-$version" "postgresql-$version" "postgresql"; do
            echo "Trying to start service: $service_name"
            if net start "$service_name" >/dev/null 2>&1; then
                echo "Successfully started service: $service_name"
                service_started=true
                break
            else
                echo "Failed to start service: $service_name"
                # Get more details about why it failed
                sc query "$service_name" 2>/dev/null || echo "Service $service_name not found"
            fi
        done
        
        # If no service started, try to start PostgreSQL manually
        if [ "$service_started" = "false" ]; then
            echo "No PostgreSQL service found, attempting to start PostgreSQL manually..."
            if [ -x "$pf_bin/postgres.exe" ]; then
                echo "Starting PostgreSQL in background..."
                "$pf_bin/postgres.exe" -D "$pf_root/data" >/dev/null 2>&1 &
                sleep 5
                service_started=true
            else
                echo "Warning: postgres.exe not found, cannot start PostgreSQL manually"
            fi
        fi
        
        # Wait for service to start
        sleep 3
        
        # Check if PostgreSQL is actually running
        if [ "$service_started" = "true" ]; then
            if check_postgresql_running "$pf_bin"; then
                echo "PostgreSQL is ready for connections"
            else
                echo "Warning: PostgreSQL service started but not accepting connections"
                echo "This may cause database creation to fail"
            fi
        else
            echo "Warning: Could not start PostgreSQL service"
            echo "Database creation may fail"
        fi
    
    # Create database
    if [[ -x "$pf_bin/createdb.exe" ]]; then
        echo "Creating postgres database..."
        "$pf_bin/createdb.exe" postgres
    fi
    
    # Install contrib if needed
    if [[ $contrib == 'true' ]]; then
        echo "PostgreSQL contrib is included by default on Windows"
    fi
    
        # Derive PGXS and export to GitHub Actions environment so nmake can include pgxs.mk
        if command -v pg_config >/dev/null 2>&1; then
            PGXS_PATH="$(pg_config --pgxs 2>/dev/null || true)"
            if [ -n "$PGXS_PATH" ]; then
                echo "PGXS determined: $PGXS_PATH"
                # For GitHub Actions, write to GITHUB_ENV so later steps can read it
                if [ -n "$GITHUB_ENV" ]; then
                    echo "PGXS=$PGXS_PATH" >> "$GITHUB_ENV"
                else
                    # Fallback for local runs
                    export PGXS="$PGXS_PATH"
                fi
            else
                echo "Warning: pg_config --pgxs returned empty; attempting to build PostgreSQL from source for pgxs.mk"
                install_pgxs_from_source "$version"
            fi
        else
            echo "Warning: pg_config not found; attempting to build PostgreSQL from source for pgxs.mk"
            install_pgxs_from_source "$version"
        fi
    
    # OS-specific optimizations
    case "$os_version" in
        windows-2022|windows-2025|windows-11|windows-10)
            echo "Optimizing for Windows $(echo $os_version | cut -d'-' -f2)"
            # Windows version-specific optimizations can go here
            ;;
        win-*)
            echo "Optimizing for Windows $(echo $os_version | cut -d'-' -f2)"
            # Windows version-specific optimizations can go here
            ;;
    esac
}

# Main installation logic
case $OS in
    "linux")
        install_postgresql_linux $PG_VERSION $CONTRIB "$OS_VERSION"
        ;;
    "macos")
        install_postgresql_macos $PG_VERSION $CONTRIB "$OS_VERSION"
        ;;
    "windows")
        install_postgresql_windows $PG_VERSION $CONTRIB "$OS_VERSION"
        ;;
    *)
        echo "Unsupported operating system: $OS"
        exit 1
        ;;
esac

echo "PostgreSQL $PG_VERSION installation completed successfully!"
