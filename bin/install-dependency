#!/usr/bin/env bash

set -e

HOST="${HOST:-github.com}"

if [[ -n ${AUTH_TOKEN} ]]; then
    prefix="${AUTH_TOKEN}:x-oauth-basic@"
fi

# Detect operating system
detect_os() {
    case "$(uname -s)" in
        Linux*)     echo "linux";;
        Darwin*)    echo "macos";;
        CYGWIN*|MINGW*|MSYS*) echo "windows";;
        *)          echo "unknown";;
    esac
}

OS=$(detect_os)

# Function to run make with appropriate permissions
run_make() {
    local directory=$1
    local target=$2
    local args=$3
    
    case $OS in
        "windows")
            # On Windows, use mingw32-make or make directly
            if command -v mingw32-make &> /dev/null; then
                mingw32-make -C ${directory} $args $target
            else
                make -C ${directory} $args $target
            fi
            ;;
        "macos")
            # On macOS, ensure we have the right environment for make
            export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"
            
            # Find PostgreSQL installation and set PG_CONFIG
            if [ -f "/opt/homebrew/bin/pg_config" ]; then
                export PG_CONFIG="/opt/homebrew/bin/pg_config"
            elif [ -f "/usr/local/bin/pg_config" ]; then
                export PG_CONFIG="/usr/local/bin/pg_config"
            else
                echo "Error: pg_config not found. PostgreSQL development packages may not be installed."
                exit 1
            fi
            
            # Set additional PostgreSQL environment variables
            export PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"
            export LDFLAGS="-L/opt/homebrew/lib -L/usr/local/lib $LDFLAGS"
            export CPPFLAGS="-I/opt/homebrew/include -I/usr/local/include $CPPFLAGS"
            
            if [[ $target == "install" ]]; then
                sudo make -C ${directory} $args $target
            else
                make -C ${directory} $args $target
            fi
            ;;
        *)
            # On Linux and other Unix-like systems, use make with sudo for install
            if [[ $target == "install" ]]; then
                sudo make -C ${directory} $args $target
            else
                make -C ${directory} $args $target
            fi
            ;;
    esac
}

for repo in $@
do
    echo "Cloning and building https://${HOST}/${repo}.git..."

    # clone repo
    directory=$(echo ${repo} | tr / _)
    git clone https://${prefix}${HOST}/${repo}.git ${directory}

    # build and install extension
    run_make ${directory} "" "CFLAGS=\"${CFLAGS}\""
    run_make ${directory} "install"
done
