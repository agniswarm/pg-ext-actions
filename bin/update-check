#!/usr/bin/env bash

set -e

# Get operating system from first argument or auto-detect
OS_INPUT="${1:-linux}"

# Parse OS and version from input
parse_os() {
    local input="$1"
    
    # Check for specific OS versions
    case "$input" in
        ubuntu-*|debian-*|centos-*|rhel-*|fedora-*|suse-*|alpine-*)
            echo "linux"
            ;;
        macos-*|darwin-*)
            echo "macos"
            ;;
        windows-*|win-*)
            echo "windows"
            ;;
        linux|macos|windows)
            echo "$input"
            ;;
        *)
            # Auto-detect if invalid input provided
            case "$(uname -s)" in
                Linux*)     echo "linux";;
                Darwin*)    echo "macos";;
                CYGWIN*|MINGW*|MSYS*) echo "windows";;
                *)          echo "unknown";;
            esac
            ;;
    esac
}

OS=$(parse_os "$OS_INPUT")
OS_VERSION="$OS_INPUT"

if [[ "$OS_INPUT" == "linux" || "$OS_INPUT" == "macos" || "$OS_INPUT" == "windows" ]]; then
    echo "Using specified operating system: $OS"
else
    echo "Using specified operating system: $OS (version: $OS_VERSION)"
fi

control_file=`ls *.control`
ext_name=`echo ${control_file} | cut -d "." -f 1`

# Get main branch name
main_branch=${EXT_BRANCH:-`git remote show origin | awk '/HEAD branch/ {print $NF}'`}

# Fetch main branch in order to get access to its control file
git fetch origin $main_branch --quiet

# Get extension version number from the main and the current branches
main_version=`git show origin/$main_branch:$control_file | grep ^\s\*default_version | sed "s/.*'\(.*\)'.*/\1/g"`
current_version=`cat $control_file | grep ^\s\*default_version | sed "s/.*'\(.*\)'.*/\1/g"`

echo "Current version: ${current_version}"
echo "Main branch version: ${main_version}"

if [[ $main_version == $current_version ]]; then
    echo 'Versions are identical, skipping update check...'
    exit 0
fi

# Function to run psql with appropriate parameters
run_psql() {
    local commands=$1
    
    case $OS in
        "windows")
            # On Windows, psql might be in a different location
            if command -v psql &> /dev/null; then
                psql postgres -U postgres -t -q -1 $commands
            else
                # Try common Windows PostgreSQL installation paths
                "C:\Program Files\PostgreSQL\*\bin\psql.exe" postgres -U postgres -t -q -1 $commands || true
            fi
            ;;
        "macos")
            # On macOS, try to find psql in common Homebrew locations
            if command -v psql &> /dev/null; then
                psql postgres -U postgres -t -q -1 $commands
            elif [ -f "/opt/homebrew/bin/psql" ]; then
                /opt/homebrew/bin/psql postgres -U postgres -t -q -1 $commands
            elif [ -f "/usr/local/bin/psql" ]; then
                /usr/local/bin/psql postgres -U postgres -t -q -1 $commands
            else
                echo "psql not found on macOS"
                exit 1
            fi
            ;;
        *)
            # On Linux and other Unix-like systems, use standard psql
            psql postgres -U postgres -t -q -1 $commands
            ;;
    esac
}

# Try upgrading extension from the main version
run_psql "-c \"CREATE EXTENSION ${ext_name} VERSION '${main_version}'\" \
          -c \"ALTER EXTENSION ${ext_name} UPDATE TO '${current_version}'\" \
          -c \"DROP EXTENSION ${ext_name}\""
