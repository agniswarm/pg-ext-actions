#!/usr/bin/env bash

set -e

control_file=`ls *.control`
ext_name=`echo ${control_file} | cut -d "." -f 1`

# Get main branch name
main_branch=${EXT_BRANCH:-`git remote show origin | awk '/HEAD branch/ {print $NF}'`}

# Fetch main branch in order to get access to its control file
git fetch origin $main_branch --quiet

# Get extension version number from the main and the current branches
main_version=`git show origin/$main_branch:$control_file | grep ^\s\*default_version | sed "s/.*'\(.*\)'.*/\1/g"`
current_version=`cat $control_file | grep ^\s\*default_version | sed "s/.*'\(.*\)'.*/\1/g"`

echo "Current version: ${current_version}"
echo "Main branch version: ${main_version}"

if [[ $main_version == $current_version ]]; then
    echo 'Versions are identical, skipping update check...'
    exit 0
fi

# Detect operating system for psql command
detect_os() {
    case "$(uname -s)" in
        Linux*)     echo "linux";;
        Darwin*)    echo "macos";;
        CYGWIN*|MINGW*|MSYS*) echo "windows";;
        *)          echo "unknown";;
    esac
}

OS=$(detect_os)

# Function to run psql with appropriate parameters
run_psql() {
    local commands=$1
    
    case $OS in
        "windows")
            # On Windows, psql might be in a different location
            if command -v psql &> /dev/null; then
                psql postgres -U postgres -t -q -1 $commands
            else
                # Try common Windows PostgreSQL installation paths
                "C:\Program Files\PostgreSQL\*\bin\psql.exe" postgres -U postgres -t -q -1 $commands || true
            fi
            ;;
        *)
            # On Unix-like systems, use standard psql
            psql postgres -U postgres -t -q -1 $commands
            ;;
    esac
}

# Try upgrading extension from the main version
run_psql "-c \"CREATE EXTENSION ${ext_name} VERSION '${main_version}'\" \
          -c \"ALTER EXTENSION ${ext_name} UPDATE TO '${current_version}'\" \
          -c \"DROP EXTENSION ${ext_name}\""
